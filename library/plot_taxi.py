import sys, os
import numpy as np
import pandas as pd
import seaborn as sns
import io
import matplotlib

matplotlib.rcParams["pdf.fonttype"] = 42
matplotlib.rcParams["ps.fonttype"] = 42
import matplotlib.pyplot as plt
from matplotlib import rc
from scipy.stats import mannwhitneyu

rc("font", **{"family": "sans-serif"})


def processplot(x: str, output: str, distance_name: list):
    """The path of output file generated by Taxi tool will be an input(x) for this and output file path will be output folder location"""
    with open(x) as input_file:
        buf = io.StringIO()
        for line in input_file:
            print(line, file=buf)
        buf.seek(0, 0)
        Plot(buf, output, distance_name)


class Plot:
    """
    This class contains all the parameters for plots
    """

    def __init__(self, buf, output, distance_name):
        """
        buf - buffer containing the data table
        output- file path for text file to output summary staistics
        distance_name- user defined list contatining name of distances to be used to make plots; option should be given in GUI

        """
        df1 = pd.read_table(
            buf, error_bad_lines=False, skiprows=1, names=list(range(13))
        )

        df1 = df1.iloc[:, 0:14]
        df1.columns = [str(x) for x in range(1, 14)]
        xx = list(
            df1.loc[
                (df1["12"] == "K2P distance") & (df1["13"] == "p-distance with gaps")
            ].index
        )
        col_values = list(df1[xx[0] : xx[0] + 1].values)
        df1 = df1[xx[0] + 1 :]
        df1.columns = col_values
        df1.reset_index(drop=True)
        df1.columns = [col[-1] for col in df1.columns]
        print(df1.columns)

        self.distance_name = distance_name
        df = df1[self.distance_name]
        df = df.applymap(lambda x: float(x)).applymap(lambda x: round(x, 3))

        df["comparison_type"] = df1["comparison_type"]

        df.sort_values(by="comparison_type", ascending=False, inplace=True)
        df = df.replace([np.inf, -np.inf], np.nan)

        self.table = df
        self.output = output

        self.genus = pd.concat([df1["genus (query 1)"].astype(str), df], axis=1)

        self.mult_hist()
        self.stack_hist()
        self.dodge_hist()
        self.table["comparison_type"] = self.table["comparison_type"].str.replace(
            "inter-genus", "inter-species"
        )
        self.mult_hist_without_genus()
        self.stack_hist_without_genus()
        self.dodge_hist_without_genus()
        self.calculations()

    def mult_hist(self):

        df = self.table.set_index("comparison_type")

        for i, col in enumerate(df.columns):

            g = sns.FacetGrid(self.table, row="comparison_type", height=1.5, aspect=4)
            g.map_dataframe(sns.histplot, x=col, binwidth=0.02)

            g.set_axis_labels("distance", "Count")
            g.set_xlabels(f"{col}")

            g.savefig(
                os.path.join(self.output, col + "_layered_hist" + ".pdf"),
                transparent=True,
            )
            g.savefig(
                os.path.join(
                    self.output, "graph_previews", col + "_layered_hist" + ".png"
                ),
                transparent=True,
            )

            # ax.bar.set_facecolor("red")

            #
            # for ax in g.axes.flat:
            #         ax.set_xlabel(ax.get_xlabel(), fontsize=12)
            #         ax.set_title(ax.get_title()+":"+" " + f"{col}",  fontsize=15)
            #         ax.set_ylabel(ax.get_ylabel(), fontsize=12)
            #         ax.tick_params(axis="x", labelsize=10)
            #         ax.tick_params(axis="y", labelsize=10)
            #
            # plt.savefig(os.path.join(self.output, col+"_layered_hist"+'.pdf'), transparent=True)

    def stack_hist(self):
        df = self.table.set_index("comparison_type")
        num = int(self.table["comparison_type"].nunique())
        palette = ["red", "#add8e6", "blue"]

        for i, col in enumerate(df.columns):
            g = sns.FacetGrid(data=self.table, height=4)
            g.map(
                sns.displot,
                x=col,
                hue="comparison_type",
                multiple="stack",
                data=self.table,
                palette=palette[0:num],
            )

            for ax in g.axes.flat:
                ax.set_xlabel(ax.get_xlabel(), fontsize=12)
                ax.set_title(ax.get_title(), fontsize=20)
                ax.set_ylabel(ax.get_ylabel(), fontsize=12)
                ax.tick_params(axis="x", labelsize=10)
                ax.tick_params(axis="y", labelsize=10)

            plt.savefig(
                os.path.join(self.output, col + "_stacked_hist" + ".pdf"),
                transparent=True,
            )
            plt.savefig(
                os.path.join(
                    self.output, "graph_previews", col + "_stacked_hist" + ".png"
                ),
                transparent=True,
            )

    def dodge_hist(self):
        num = int(self.table["comparison_type"].nunique())
        palette = ["red", "#add8e6", "blue"]
        df = self.table.set_index("comparison_type")

        for i, col in enumerate(df.columns):
            g = sns.FacetGrid(self.table, height=4)
            g.map(
                sns.displot,
                col,
                hue="comparison_type",
                multiple="dodge",
                data=self.table,
                palette=palette[0:num],
            )

            for ax in g.axes.flat:
                ax.set_xlabel(ax.get_xlabel(), fontsize=12)
                ax.set_title(ax.get_title(), fontsize=20)
                ax.set_ylabel(ax.get_ylabel(), fontsize=12)
                ax.tick_params(axis="x", labelsize=10)
                ax.tick_params(axis="y", labelsize=10)

            plt.savefig(
                os.path.join(self.output, col + "_dodge_hist" + ".pdf"),
                transparent=True,
            )
            plt.savefig(
                os.path.join(
                    self.output, "graph_previews", col + "_dodge_hist" + ".png"
                ),
                transparent=True,
            )

    def mult_hist_without_genus(self):

        df = self.table.set_index("comparison_type")

        for i, col in enumerate(df.columns):

            g = sns.FacetGrid(self.table, row="comparison_type", height=1.5, aspect=4)
            g.map_dataframe(sns.histplot, x=col, binwidth=0.02)

            g.set_axis_labels("distance", "Count")
            g.set_xlabels(f"{col}")

            g.savefig(
                os.path.join(
                    self.output, col + "_layered_hist_without_inter_genus" + ".pdf"
                ),
                transparent=True,
            )
            g.savefig(
                os.path.join(
                    self.output,
                    "graph_previews",
                    col + "_layered_hist_without_inter_genus" + ".png",
                ),
                transparent=True,
            )

            # ax.bar.set_facecolor("red")

            #
            # for ax in g.axes.flat:
            #         ax.set_xlabel(ax.get_xlabel(), fontsize=12)
            #         ax.set_title(ax.get_title()+":"+" " + f"{col}",  fontsize=15)
            #         ax.set_ylabel(ax.get_ylabel(), fontsize=12)
            #         ax.tick_params(axis="x", labelsize=10)
            #         ax.tick_params(axis="y", labelsize=10)
            #
            # plt.savefig(os.path.join(self.output, col+"_layered_hist_without_inter_genus"+'.pdf'), transparent=True)

    def stack_hist_without_genus(self):
        df = self.table.set_index("comparison_type")
        num = int(self.table["comparison_type"].nunique())
        palette = ["red", "#add8e6", "blue"]

        for i, col in enumerate(df.columns):
            g = sns.FacetGrid(data=self.table, height=4)
            g.map(
                sns.displot,
                x=col,
                hue="comparison_type",
                multiple="stack",
                data=self.table,
                palette=palette[0:num],
            )

            for ax in g.axes.flat:
                ax.set_xlabel(ax.get_xlabel(), fontsize=12)
                ax.set_title(ax.get_title(), fontsize=20)
                ax.set_ylabel(ax.get_ylabel(), fontsize=12)
                ax.tick_params(axis="x", labelsize=10)
                ax.tick_params(axis="y", labelsize=10)

            plt.savefig(
                os.path.join(
                    self.output, col + "_stacked_hist_without_inter_genus" + ".pdf"
                ),
                transparent=True,
            )
            plt.savefig(
                os.path.join(
                    self.output,
                    "graph_previews",
                    col + "_stacked_hist_without_inter_genus" + ".png",
                ),
                transparent=True,
            )

    def dodge_hist_without_genus(self):
        num = int(self.table["comparison_type"].nunique())
        palette = ["red", "#add8e6", "blue"]
        df = self.table.set_index("comparison_type")

        for i, col in enumerate(df.columns):
            g = sns.FacetGrid(self.table, height=4)
            g.map(
                sns.displot,
                col,
                hue="comparison_type",
                multiple="dodge",
                data=self.table,
                palette=palette[0:num],
            )

            for ax in g.axes.flat:
                ax.set_xlabel(ax.get_xlabel(), fontsize=12)
                ax.set_title(ax.get_title(), fontsize=20)
                ax.set_ylabel(ax.get_ylabel(), fontsize=12)
                ax.tick_params(axis="x", labelsize=10)
                ax.tick_params(axis="y", labelsize=10)

            plt.savefig(
                os.path.join(
                    self.output, col + "_dodge_hist_without_inter_genus" + ".pdf"
                ),
                transparent=True,
            )
            plt.savefig(
                os.path.join(
                    self.output,
                    "graph_previews",
                    col + "_dodge_hist_without_inter_genus" + ".png",
                ),
                transparent=True,
            )

    def calculations(self):
        with open(
            os.path.join(self.output, "statistics_distance.txt"), mode="a"
        ) as file:
            df = self.table
            df2 = self.table.set_index("comparison_type")
            Man1 = df[df.comparison_type == "inter-species"]
            Man1.set_index("comparison_type", inplace=True)
            Man2 = df[df.comparison_type == "intra-species"]
            Man2.set_index("comparison_type", inplace=True)

            for i, col in enumerate(df2.columns):

                sd = pd.DataFrame(df2[[col]].describe())
                sd = sd.rename(
                    index={
                        "count": "Count",
                        "std": "StdDev",
                        "mean": "Mean",
                        "min": "Min",
                        "25%": "25% Quartile",
                        "50%": "Median",
                        "75%": "75% Quartile",
                        "max": "Max",
                    }
                )

                sd[col] = sd[col].map(lambda x: round(x, 3)).map(lambda x: str(x))
                new = sd.loc["Count", col]
                cc = int(float(new))
                sd.at["Count", col] = cc
                sd.loc["Count", col] = cc
                sd.replace(new, cc)
                print(f"Descriptive Statistics for the Whole Data for {col}", file=file)

                print(sd, file=file)
                # self.table.describe().to_csv(os.path.join(self.output, "statistics_distance.txt"), mode='a')

                print(
                    "#######################################################################################################",
                    file=file,
                )

            for i, col in enumerate(df2.columns):
                for name, group in df[["comparison_type", col]].groupby(
                    "comparison_type"
                ):
                    group = group.set_index("comparison_type")
                    df222 = pd.DataFrame(group.describe().squeeze())
                    df222 = df222.rename(
                        index={
                            "count": "Count",
                            "std": "StdDev",
                            "mean": "Mean",
                            "min": "Min",
                            "25%": "25% Quartile",
                            "50%": "Median",
                            "75%": "75% Quartile",
                            "max": "Max",
                        }
                    )

                    df222[col] = (
                        df222[col].map(lambda x: round(x, 3)).map(lambda x: str(x))
                    )
                    new = df222.loc["Count", col]
                    cc = int(float(new))
                    df222.at["Count", col] = cc
                    df222.loc["Count", col] = cc
                    df222.replace(new, cc)
                    print(
                        f"Descriptive Statistics for {col} and and comparison_type {name}",
                        file=file,
                    )
                    print(df222, file=file)

                    # df222.to_csv(os.path.join(self.output, "statistics_distance.txt"), mode='a')
                    print(
                        "################################################################################################",
                        file=file,
                    )

            for i, col in enumerate(df2.columns):
                for name, group in self.genus[
                    ["genus (query 1)", "comparison_type", col]
                ].groupby(["genus (query 1)", "comparison_type"]):
                    group = group.set_index(["genus (query 1)", "comparison_type"])
                    df222 = pd.DataFrame(group.describe().squeeze())
                    print(df222)
                    df222 = df222.rename(
                        index={
                            "count": "Count",
                            "std": "StdDev",
                            "mean": "Mean",
                            "min": "Min",
                            "25%": "25% Quartile",
                            "50%": "Median",
                            "75%": "75% Quartile",
                            "max": "Max",
                        }
                    )

                    df222[col] = (
                        df222[col].map(lambda x: round(x, 3)).map(lambda x: str(x))
                    )
                    new = df222.loc["Count", col]
                    cc = int(float(new))
                    df222.at["Count", col] = cc
                    df222.loc["Count", col] = cc
                    df222.replace(new, cc)
                    print(
                        f"Descriptive Statistics for {col} and Genus {name[0]} and comparison_type {name[-1]}",
                        file=file,
                    )
                    print(df222, file=file)

                    print(
                        "################################################################################################",
                        file=file,
                    )

            for i, j in zip(Man1.columns, Man2.columns):
                print(
                    f"Mann-Whitney-U test Statistics for interspecies and intraspecies distance values",
                    file=file,
                )

                stat, p = mannwhitneyu(Man1[i], Man2[j])

                print("Statistics U (Z-value)=%.3f, p=%.3f" % (stat, p), file=file)
                print(
                    "################################################################################################",
                    file=file,
                )
                print(
                    f"difference between maximum intraspecies and minimum inerspecies is {Man2[j].max()- Man1[i].min()}",
                    file=file,
                )
                print(
                    f"Total number of intraspecific distance values that are higher than the lowest interspecific value and their percentage relative to the total number of intraspecific values is {Man2[Man2[j]> Man1[i].min()].index.size}, and {(Man2[Man2[j]> Man1[i].min()].index.size)/(Man2.index.size)} respectively",
                    file=file,
                )
                print(
                    f"Total number of interspecific distance values that are lower than the highest intraspecific value, and their percentage relative to the total number of interspecific values is {Man1[Man1[i]> Man2[j].max()].index.size}, and {(Man1[Man1[i]> Man2[j].max()].index.size)/(Man1.index.size)} respectively",
                    file=file,
                )


if __name__ == "__main__":
    processplot(
        "requirements_alignments.txt",
        os.path.join(".", "output"),
        ["p-distance", "K2P distance"],
    )
